var searchIndex = {};
searchIndex["redis"] = {"doc":"redis-rs is a rust implementation of a Redis client library.  It exposes a general purpose interface to Redis and also provides specific helpers for commonly used functionality.","items":[[3,"Client","redis","The client type.",null,null],[3,"Cmd","","Represents redis commands.",null,null],[3,"Iter","","Represents a redis iterator.",null,null],[3,"Pipeline","","Represents a redis command pipeline.",null,null],[3,"Connection","","Represents a stateful redis TCP connection.",null,null],[3,"ConnectionInfo","","Holds the connection information that redis should use for connecting.",null,null],[12,"addr","","A boxed connection address for where to connect to.",0,null],[12,"db","","The database number to use.  This is usually `0`.",0,null],[12,"passwd","","Optionally a password that should be used for connection.",0,null],[3,"Msg","","Represents a pubsub message.",null,null],[3,"PubSub","","Represents a pubsub connection.",null,null],[3,"Parser","","The internal redis response parser.",null,null],[3,"Script","","Represents a lua script.",null,null],[3,"ScriptInvocation","","Represents a prepared script call.",null,null],[3,"InfoDict","","An info dictionary type.",null,null],[3,"RedisError","","Represents a redis error.  For the most part you should be using the Error trait to interact with this rather than the actual struct.",null,null],[4,"ControlFlow","","Allows pubsub callbacks to stop receiving messages.",null,null],[13,"Continue","","",1,null],[13,"Break","","",1,null],[4,"ConnectionAddr","","Defines the connection address.",null,null],[13,"Tcp","","Format for this is `(host, port)`.",2,null],[13,"Unix","","Format for this is the path to the unix socket.",2,null],[4,"ErrorKind","","An enum of all error kinds.",null,null],[13,"ResponseError","","The server generated an invalid response.",3,null],[13,"AuthenticationFailed","","The authentication with the server failed.",3,null],[13,"TypeError","","Operation failed because of a type mismatch.",3,null],[13,"ExecAbortError","","A script execution was aborted.",3,null],[13,"BusyLoadingError","","The server cannot response because it's loading a dump.",3,null],[13,"NoScriptError","","A script that was requested does not actually exist.",3,null],[13,"InvalidClientConfig","","An error that was caused because the parameter to the client were wrong.",3,null],[13,"IoError","","This kind is returned if the redis error is one that is not native to the system.  This is usually the case if the cause is another error.",3,null],[13,"ExtensionError","","An extension error.  This is an error created by the server that is not directly understood by the library.",3,null],[4,"NumericBehavior","","Helper enum that is used in some situations to describe the behavior of arguments in a numeric context.",null,null],[13,"NonNumeric","","",4,null],[13,"NumberIsInteger","","",4,null],[13,"NumberIsFloat","","",4,null],[4,"Value","","Internal low-level redis value enum.",null,null],[13,"Nil","","A nil response from the server.",5,null],[13,"Int","","An integer response.  Note that there are a few situations in which redis actually returns a string for an integer which is why this library generally treats integers and strings the same for all numeric responses.",5,null],[13,"Data","","An arbitary binary data.",5,null],[13,"Bulk","","A bulk response of more data.  This is generally used by redis to express nested structures.",5,null],[13,"Status","","A status response.",5,null],[13,"Okay","","A status response which represents the string \"OK\".",5,null],[5,"cmd","","Shortcut function to creating a command with a single argument.",null,{"i":[{"n":"str"}],"o":{"n":"cmd"}}],[5,"pack_command","","Packs a bunch of commands into a request.  This is generally a quite useless function as this functionality is nicely wrapped through the `Cmd` object, but in some cases it can be useful.  The return value of this can then be send to the low level `ConnectionLike` methods.",null,null],[5,"pipe","","Shortcut for creating a new pipeline.",null,{"o":{"n":"pipeline"}}],[5,"parse_redis_url","","This function takes a redis URL string and parses it into a URL as used by rust-url.  This is necessary as the default parser does not understand how redis URLs function.",null,{"i":[{"n":"str"}],"o":{"g":["url"],"n":"result"}}],[5,"transaction","","This function simplifies transaction management slightly.  What it does is automatically watching keys and then going into a transaction loop util it succeeds.  Once it goes through the results are returned.",null,null],[5,"parse_async","","",null,{"i":[{"n":"r"}],"o":{"n":"valuefuture"}}],[5,"parse_redis_value","","Parses bytes into a redis value.",null,null],[5,"from_redis_value","","A shortcut function to invoke `FromRedisValue::from_redis_value` to make the API slightly nicer.",null,{"i":[{"n":"value"}],"o":{"n":"redisresult"}}],[0,"async","","",null,null],[3,"Connection","redis::async","Represents a stateful redis TCP connection.",null,null],[3,"SharedConnection","","",null,null],[5,"connect","","",null,{"i":[{"n":"connectioninfo"}],"o":{"g":["connection"],"n":"redisfuture"}}],[8,"ConnectionLike","","",null,null],[10,"req_packed_command","","Sends an already encoded (packed) command into the TCP socket and reads the single response from it.",6,{"i":[{"n":"self"},{"g":["u8"],"n":"vec"}],"o":{"n":"redisfuture"}}],[10,"req_packed_commands","","Sends multiple already encoded (packed) command into the TCP socket and reads `count` responses from it.  This is used to implement pipelining.",6,{"i":[{"n":"self"},{"g":["u8"],"n":"vec"},{"n":"usize"},{"n":"usize"}],"o":{"n":"redisfuture"}}],[10,"get_db","","Returns the database this connection is bound to.  Note that this information might be unreliable because it's initially cached and also might be incorrect if the connection like object is not actually connected.",6,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"read_response","","",7,{"i":[{"n":"self"}],"o":{"n":"redisfuture"}}],[11,"req_packed_command","","",7,{"i":[{"n":"self"},{"g":["u8"],"n":"vec"}],"o":{"n":"redisfuture"}}],[11,"req_packed_commands","","",7,{"i":[{"n":"self"},{"g":["u8"],"n":"vec"},{"n":"usize"},{"n":"usize"}],"o":{"n":"redisfuture"}}],[11,"get_db","","",7,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"sharedconnection"}}],[11,"new","","",8,{"i":[{"n":"connection"}],"o":{"n":"redisfuture"}}],[11,"req_packed_command","","",8,{"i":[{"n":"self"},{"g":["u8"],"n":"vec"}],"o":{"n":"redisfuture"}}],[11,"req_packed_commands","","",8,{"i":[{"n":"self"},{"g":["u8"],"n":"vec"},{"n":"usize"},{"n":"usize"}],"o":{"n":"redisfuture"}}],[11,"get_db","","",8,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"fmt","redis","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"client"}}],[11,"open","","Connects to a redis server and returns a client.  This does not actually open a connection yet but it does perform some basic checks on the URL that might make the operation fail.",9,{"i":[{"n":"t"}],"o":{"g":["client"],"n":"redisresult"}}],[11,"get_connection","","Instructs the client to actually connect to redis and returns a connection object.  The connection object can be used to send commands to the server.  This can fail with a variety of errors (like unreachable host) so it's important that you handle those errors.",9,{"i":[{"n":"self"}],"o":{"g":["connection"],"n":"redisresult"}}],[11,"get_async_connection","","",9,{"i":[{"n":"self"}],"o":{"g":["connection"],"n":"redisfuture"}}],[11,"get_shared_async_connection","","",9,{"i":[{"n":"self"}],"o":{"g":["sharedconnection"],"n":"redisfuture"}}],[11,"req_packed_command","","",9,null],[11,"req_packed_commands","","",9,null],[11,"get_db","","",9,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"cmd"}}],[11,"next","","",11,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"new","","Creates a new empty command.",10,{"o":{"n":"cmd"}}],[11,"arg","","Appends an argument to the command.  The argument passed must be a type that implements `ToRedisArgs`.  Most primitive types as well as vectors of primitive types implement it.",10,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"cmd"}}],[11,"cursor_arg","","Works similar to `arg` but adds a cursor argument.  This is always an integer and also flips the command implementation to support a different mode for the iterators where the iterator will ask for another batch of items when the local data is exhausted.",10,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"cmd"}}],[11,"get_packed_command","","Returns the packed command as a byte vector.",10,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"vec"}}],[11,"in_scan_mode","","Returns true if the command is in scan mode.",10,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"query","","Sends the command as query to the connection and converts the result to the target redis value.  This is the general way how you can retrieve data.",10,{"i":[{"n":"self"},{"n":"connectionlike"}],"o":{"n":"redisresult"}}],[11,"query_async","","",10,{"i":[{"n":"self"},{"n":"c"}],"o":{"n":"redisfuture"}}],[11,"iter","","Similar to `query()` but returns an iterator over the items of the bulk result or iterator.  In normal mode this is not in any way more efficient than just querying into a `Vec<T>` as it's internally implemented as buffering into a vector.  This however is useful when `cursor_arg` was used in which case the iterator will query for more items until the server side cursor is exhausted.",10,{"i":[{"n":"self"},{"n":"connectionlike"}],"o":{"g":["iter"],"n":"redisresult"}}],[11,"execute","","This is a shortcut to `query()` that does not return a value and will fail the task if the query fails because of an error.  This is mainly useful in examples and for simple commands like setting keys.",10,{"i":[{"n":"self"},{"n":"connectionlike"}]}],[11,"new","","Creates an empty pipeline.  For consistency with the `cmd` api a `pipe` function is provided as alias.",12,{"o":{"n":"pipeline"}}],[11,"cmd","","Starts a new command.  Functions such as `arg` then become available to add more arguments to that command.",12,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"pipeline"}}],[11,"add_command","","Adds a command to the pipeline.",12,{"i":[{"n":"self"},{"n":"cmd"}],"o":{"n":"pipeline"}}],[11,"arg","","Adds an argument to the last started command.  This works similar to the `arg` method of the `Cmd` object.",12,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"pipeline"}}],[11,"ignore","","Instructs the pipeline to ignore the return value of this command. It will still be ensured that it is not an error, but any successful result is just thrown away.  This makes result processing through tuples much easier because you do not need to handle all the items you do not care about.",12,{"i":[{"n":"self"}],"o":{"n":"pipeline"}}],[11,"atomic","","This enables atomic mode.  In atomic mode the whole pipeline is enclosed in `MULTI`/`EXEC`.  From the user's point of view nothing changes however.  This is easier than using `MULTI`/`EXEC` yourself as the format does not change.",12,{"i":[{"n":"self"}],"o":{"n":"pipeline"}}],[11,"query","","Executes the pipeline and fetches the return values.  Since most pipelines return different types it's recommended to use tuple matching to process the results:",12,{"i":[{"n":"self"},{"n":"connectionlike"}],"o":{"n":"redisresult"}}],[11,"query_async","","",12,{"i":[{"n":"self"},{"n":"c"}],"o":{"n":"redisfuture"}}],[11,"execute","","This is a shortcut to `query()` that does not return a value and will fail the task if the query of the pipeline fails.",12,{"i":[{"n":"self"},{"n":"connectionlike"}]}],[11,"subscribe","","",13,{"i":[{"n":"self"},{"n":"c"},{"n":"f"}],"o":{"n":"redisresult"}}],[11,"psubscribe","","",13,{"i":[{"n":"self"},{"n":"p"},{"n":"f"}],"o":{"n":"redisresult"}}],[11,"perform","","",12,{"i":[{"n":"self"},{"n":"cmd"}],"o":{"n":"pipeline"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"connectionaddr"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"connectionaddr"}],"o":{"n":"bool"}}],[11,"ne","","",2,{"i":[{"n":"self"},{"n":"connectionaddr"}],"o":{"n":"bool"}}],[11,"is_supported","","",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"connectioninfo"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"into_connection_info","","",0,{"i":[{"n":"self"}],"o":{"g":["connectioninfo"],"n":"redisresult"}}],[11,"send_packed_command","","Sends an already encoded (packed) command into the TCP socket and does not read a response.  This is useful for commands like `MONITOR` which yield multiple items.  This needs to be used with care because it changes the state of the connection.",13,null],[11,"recv_response","","Fetches a single response from the connection.  This is useful if used in combination with `send_packed_command`.",13,{"i":[{"n":"self"}],"o":{"g":["value"],"n":"redisresult"}}],[11,"set_write_timeout","","Sets the write timeout for the connection.",13,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}],"o":{"n":"redisresult"}}],[11,"set_read_timeout","","Sets the read timeout for the connection.",13,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}],"o":{"n":"redisresult"}}],[11,"as_pubsub","","",13,{"i":[{"n":"self"}],"o":{"n":"pubsub"}}],[11,"is_open","","Returns the connection status.",13,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"req_packed_command","","",13,null],[11,"req_packed_commands","","",13,null],[11,"get_db","","",13,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"subscribe","","Subscribes to a new channel.",14,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"redisresult"}}],[11,"psubscribe","","Subscribes to a new channel with a pattern.",14,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"redisresult"}}],[11,"unsubscribe","","Unsubscribes from a channel.",14,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"redisresult"}}],[11,"punsubscribe","","Unsubscribes from a channel with a pattern.",14,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"redisresult"}}],[11,"get_message","","Fetches the next message from the pubsub connection.  Blocks until a message becomes available.  This currently does not provide a wait not to block :(",14,{"i":[{"n":"self"}],"o":{"g":["msg"],"n":"redisresult"}}],[11,"set_read_timeout","","Sets the read timeout for the connection.",14,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}],"o":{"n":"redisresult"}}],[11,"drop","","",14,{"i":[{"n":"self"}]}],[11,"get_channel","","Returns the channel this message came on.",15,{"i":[{"n":"self"}],"o":{"n":"redisresult"}}],[11,"get_channel_name","","Convenience method to get a string version of the channel.  Unless your channel contains non utf-8 bytes you can always use this method.  If the channel is not a valid string (which really should not happen) then the return value is `\"?\"`.",15,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"get_payload","","Returns the message's payload in a specific format.",15,{"i":[{"n":"self"}],"o":{"n":"redisresult"}}],[11,"get_payload_bytes","","Returns the bytes that are the message's payload.  This can be used as an alternative to the `get_payload` function if you are interested in the raw bytes in it.",15,null],[11,"from_pattern","","Returns true if the message was constructed from a pattern subscription.",15,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get_pattern","","If the message was constructed from a message pattern this can be used to find out which one.  It's recommended to match against an `Option<String>` so that you do not need to use `from_pattern` to figure out if a pattern was set.",15,{"i":[{"n":"self"}],"o":{"n":"redisresult"}}],[11,"new","","Creates a new parser that parses the data behind the reader.  More than one value can be behind the reader in which case the parser can be invoked multiple times.  In other words: the stream does not have to be terminated.",16,{"i":[{"n":"t"}],"o":{"n":"parser"}}],[11,"parse_value","","",16,{"i":[{"n":"self"}],"o":{"g":["value"],"n":"redisresult"}}],[11,"new","","Creates a new script object.",17,{"i":[{"n":"str"}],"o":{"n":"script"}}],[11,"get_hash","","Returns the script's SHA1 hash in hexadecimal format.",17,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"key","","Creates a script invocation object with a key filled in.",17,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"scriptinvocation"}}],[11,"arg","","Creates a script invocation object with an argument filled in.",17,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"scriptinvocation"}}],[11,"prepare_invoke","","Returns an empty script invocation object.  This is primarily useful for programmatically adding arguments and keys because the type will not change.  Normally you can use `arg` and `key` directly.",17,{"i":[{"n":"self"}],"o":{"n":"scriptinvocation"}}],[11,"invoke","","Invokes the script directly without arguments.",17,{"i":[{"n":"self"},{"n":"connectionlike"}],"o":{"n":"redisresult"}}],[11,"arg","","Adds a regular argument to the invocation.  This ends up as `ARGV[i]` in the script.",18,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"scriptinvocation"}}],[11,"key","","Adds a key argument to the invocation.  This ends up as `KEYS[i]` in the script.",18,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"scriptinvocation"}}],[11,"invoke","","Invokes the script and returns the result.",18,{"i":[{"n":"self"},{"n":"connectionlike"}],"o":{"n":"redisresult"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"numericbehavior"}],"o":{"n":"bool"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"numericbehavior"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"errorkind"}],"o":{"n":"bool"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"errorkind"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"value"}],"o":{"n":"bool"}}],[11,"ne","","",5,{"i":[{"n":"self"},{"n":"value"}],"o":{"n":"bool"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"value"}}],[11,"looks_like_cursor","","Checks if the return value looks like it fulfils the cursor protocol.  That means the result is a bulk item of length two with the first one being a cursor and the second a bulk response.",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",19,{"i":[{"n":"self"},{"n":"rediserror"}],"o":{"n":"bool"}}],[11,"from","","",19,{"i":[{"n":"error"}],"o":{"n":"rediserror"}}],[11,"from","","",19,{"i":[{"n":"utf8error"}],"o":{"n":"rediserror"}}],[11,"from","","",19,null],[11,"from","","",19,null],[11,"description","","",19,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",19,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"kind","","Returns the kind of the error.",19,{"i":[{"n":"self"}],"o":{"n":"errorkind"}}],[11,"category","","Returns the name of the error category for display purposes.",19,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"is_io_error","","Indicates that this failure is an IO failure.",19,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_connection_refusal","","Returns true if this error indicates that the connection was refused.  You should generally not rely much on this function unless you are writing unit tests that want to detect if a local server is available.",19,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_timeout","","Returns true if error was caused by I/O time out. Note that this may not be accurate depending on platform.",19,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_connection_dropped","","Returns true if error was caused by a dropped connection.",19,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"extension_error_code","","Returns the extension error code",19,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new info dictionary from a string in the response of the INFO command.  Each line is a key, value pair with the key and value separated by a colon (`:`).  Lines starting with a hash (`#`) are ignored.",20,{"i":[{"n":"str"}],"o":{"n":"infodict"}}],[11,"get","","Fetches a value by key and converts it into the given type. Typical types are `String`, `bool` and integer types.",20,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"option"}}],[11,"find","","",20,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["value"],"n":"option"}}],[11,"contains_key","","",20,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"len","","",20,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"from_redis_value","","",5,{"i":[{"n":"value"}],"o":{"g":["value"],"n":"redisresult"}}],[11,"from_redis_value","","",20,{"i":[{"n":"value"}],"o":{"g":["infodict"],"n":"redisresult"}}],[6,"RedisFuture","","",null,null],[6,"RedisResult","","Library generic result type.",null,null],[8,"Commands","","Implements common redis commands for connection like objects.  This allows you to send commands straight to a connection or client.  It is also implemented for redis results of clients which makes for very convenient access in some basic cases.",null,null],[11,"get","","Get the value of a key.  If key is a vec this becomes an `MGET`.",21,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"keys","","Gets all keys matching pattern",21,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"set","","Set the string value of a key.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"v"}],"o":{"n":"redisresult"}}],[11,"set_multiple","","Sets multiple keys to their values.",21,null],[11,"set_ex","","Set the value and expiration of a key.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"v"},{"n":"usize"}],"o":{"n":"redisresult"}}],[11,"set_nx","","Set the value of a key, only if the key does not exist",21,{"i":[{"n":"self"},{"n":"k"},{"n":"v"}],"o":{"n":"redisresult"}}],[11,"mset_nx","","Sets multiple keys to their values failing if at least one already exists.",21,null],[11,"getset","","Set the string value of a key and return its old value.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"v"}],"o":{"n":"redisresult"}}],[11,"del","","Delete one or more keys.",21,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"exists","","Determine if a key exists.",21,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"expire","","Set a key's time to live in seconds.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"usize"}],"o":{"n":"redisresult"}}],[11,"expire_at","","Set the expiration for a key as a UNIX timestamp.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"usize"}],"o":{"n":"redisresult"}}],[11,"pexpire","","Set a key's time to live in milliseconds.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"usize"}],"o":{"n":"redisresult"}}],[11,"pexpire_at","","Set the expiration for a key as a UNIX timestamp in milliseconds.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"usize"}],"o":{"n":"redisresult"}}],[11,"persist","","Remove the expiration from a key.",21,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"rename","","Rename a key.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"rename_nx","","Rename a key, only if the new key does not exist.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"append","","Append a value to a key.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"v"}],"o":{"n":"redisresult"}}],[11,"incr","","Increment the numeric value of a key by the given amount.  This issues a `INCRBY` or `INCRBYFLOAT` depending on the type.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"v"}],"o":{"n":"redisresult"}}],[11,"setbit","","Sets or clears the bit at offset in the string value stored at key.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"usize"},{"n":"bool"}],"o":{"n":"redisresult"}}],[11,"getbit","","Returns the bit value at offset in the string value stored at key.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"usize"}],"o":{"n":"redisresult"}}],[11,"bitcount","","Count set bits in a string.",21,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"bitcount_range","","Count set bits in a string in a range.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"usize"},{"n":"usize"}],"o":{"n":"redisresult"}}],[11,"bit_and","","Perform a bitwise AND between multiple keys (containing string values) and store the result in the destination key.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"bit_or","","Perform a bitwise OR between multiple keys (containing string values) and store the result in the destination key.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"bit_xor","","Perform a bitwise XOR between multiple keys (containing string values) and store the result in the destination key.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"bit_not","","Perform a bitwise NOT of the key (containing string values) and store the result in the destination key.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"strlen","","Get the length of the value stored in a key.",21,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"hget","","Gets a single (or multiple) fields from a hash.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"f"}],"o":{"n":"redisresult"}}],[11,"hdel","","Deletes a single (or multiple) fields from a hash.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"f"}],"o":{"n":"redisresult"}}],[11,"hset","","Sets a single field in a hash.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"f"},{"n":"v"}],"o":{"n":"redisresult"}}],[11,"hset_nx","","Sets a single field in a hash if it does not exist.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"f"},{"n":"v"}],"o":{"n":"redisresult"}}],[11,"hset_multiple","","Sets a multiple fields in a hash.",21,null],[11,"hincr","","Increments a value.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"f"},{"n":"d"}],"o":{"n":"redisresult"}}],[11,"hexists","","Checks if a field in a hash exists.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"f"}],"o":{"n":"redisresult"}}],[11,"hkeys","","Gets all the keys in a hash.",21,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"hvals","","Gets all the values in a hash.",21,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"hgetall","","Gets all the fields and values in a hash.",21,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"hlen","","Gets the length of a hash.",21,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"blpop","","Remove and get the first element in a list, or block until one is available.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"usize"}],"o":{"n":"redisresult"}}],[11,"brpop","","Remove and get the last element in a list, or block until one is available.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"usize"}],"o":{"n":"redisresult"}}],[11,"brpoplpush","","Pop a value from a list, push it to another list and return it; or block until one is available.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"k"},{"n":"usize"}],"o":{"n":"redisresult"}}],[11,"lindex","","Get an element from a list by its index.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"isize"}],"o":{"n":"redisresult"}}],[11,"linsert_before","","Insert an element before another element in a list.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"p"},{"n":"v"}],"o":{"n":"redisresult"}}],[11,"linsert_after","","Insert an element after another element in a list.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"p"},{"n":"v"}],"o":{"n":"redisresult"}}],[11,"llen","","Returns the length of the list stored at key.",21,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"lpop","","Removes and returns the first element of the list stored at key.",21,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"lpush","","Insert all the specified values at the head of the list stored at key.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"v"}],"o":{"n":"redisresult"}}],[11,"lpush_exists","","Inserts a value at the head of the list stored at key, only if key already exists and holds a list.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"v"}],"o":{"n":"redisresult"}}],[11,"lrange","","Returns the specified elements of the list stored at key.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"isize"},{"n":"isize"}],"o":{"n":"redisresult"}}],[11,"lrem","","Removes the first count occurrences of elements equal to value from the list stored at key.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"isize"},{"n":"v"}],"o":{"n":"redisresult"}}],[11,"ltrim","","Trim an existing list so that it will contain only the specified range of elements specified.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"isize"},{"n":"isize"}],"o":{"n":"redisresult"}}],[11,"lset","","Sets the list element at index to value",21,{"i":[{"n":"self"},{"n":"k"},{"n":"isize"},{"n":"v"}],"o":{"n":"redisresult"}}],[11,"rpop","","Removes and returns the last element of the list stored at key.",21,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"rpoplpush","","Pop a value from a list, push it to another list and return it.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"rpush","","Insert all the specified values at the tail of the list stored at key.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"v"}],"o":{"n":"redisresult"}}],[11,"rpush_exists","","Inserts value at the tail of the list stored at key, only if key already exists and holds a list.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"v"}],"o":{"n":"redisresult"}}],[11,"sadd","","Add one or more members to a set.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"m"}],"o":{"n":"redisresult"}}],[11,"scard","","Get the number of members in a set.",21,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"sdiff","","Subtract multiple sets.",21,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"sdiffstore","","Subtract multiple sets and store the resulting set in a key.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"sinter","","Intersect multiple sets.",21,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"sdinterstore","","Intersect multiple sets and store the resulting set in a key.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"sismember","","Determine if a given value is a member of a set.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"m"}],"o":{"n":"redisresult"}}],[11,"smembers","","Get all the members in a set.",21,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"smove","","Move a member from one set to another.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"k"},{"n":"m"}],"o":{"n":"redisresult"}}],[11,"spop","","Remove and return a random member from a set.",21,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"srandmember","","Get one random member from a set.",21,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"srandmember_multiple","","Get multiple random members from a set.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"usize"}],"o":{"n":"redisresult"}}],[11,"srem","","Remove one or more members from a set.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"m"}],"o":{"n":"redisresult"}}],[11,"sunion","","Add multiple sets.",21,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"sunionstore","","Add multiple sets and store the resulting set in a key.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"zadd","","Add one member to a sorted set, or update its score if it already exists.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"m"},{"n":"s"}],"o":{"n":"redisresult"}}],[11,"zadd_multiple","","Add multiple members to a sorted set, or update its score if it already exists.",21,null],[11,"zcard","","Get the number of members in a sorted set.",21,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"zcount","","Count the members in a sorted set with scores within the given values.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"m"},{"n":"mm"}],"o":{"n":"redisresult"}}],[11,"zincr","","Increments the member in a sorted set at key by delta. If the member does not exist, it is added with delta as its score.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"m"},{"n":"d"}],"o":{"n":"redisresult"}}],[11,"zinterstore","","Intersect multiple sorted sets and store the resulting sorted set in a new key using SUM as aggregation function.",21,null],[11,"zinterstore_min","","Intersect multiple sorted sets and store the resulting sorted set in a new key using MIN as aggregation function.",21,null],[11,"zinterstore_max","","Intersect multiple sorted sets and store the resulting sorted set in a new key using MAX as aggregation function.",21,null],[11,"zlexcount","","Count the number of members in a sorted set between a given lexicographical range.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"l"},{"n":"l"}],"o":{"n":"redisresult"}}],[11,"zrange","","Return a range of members in a sorted set, by index",21,{"i":[{"n":"self"},{"n":"k"},{"n":"isize"},{"n":"isize"}],"o":{"n":"redisresult"}}],[11,"zrange_withscores","","Return a range of members in a sorted set, by index with scores.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"isize"},{"n":"isize"}],"o":{"n":"redisresult"}}],[11,"zrangebylex","","Return a range of members in a sorted set, by lexicographical range.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"m"},{"n":"mm"}],"o":{"n":"redisresult"}}],[11,"zrangebylex_limit","","Return a range of members in a sorted set, by lexicographical range with offset and limit.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"m"},{"n":"mm"},{"n":"isize"},{"n":"isize"}],"o":{"n":"redisresult"}}],[11,"zrevrangebylex","","Return a range of members in a sorted set, by lexicographical range.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"mm"},{"n":"m"}],"o":{"n":"redisresult"}}],[11,"zrevrangebylex_limit","","Return a range of members in a sorted set, by lexicographical range with offset and limit.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"mm"},{"n":"m"},{"n":"isize"},{"n":"isize"}],"o":{"n":"redisresult"}}],[11,"zrangebyscore","","Return a range of members in a sorted set, by score.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"m"},{"n":"mm"}],"o":{"n":"redisresult"}}],[11,"zrangebyscore_withscores","","Return a range of members in a sorted set, by score with scores.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"m"},{"n":"mm"}],"o":{"n":"redisresult"}}],[11,"zrangebyscore_limit","","Return a range of members in a sorted set, by score with limit.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"m"},{"n":"mm"},{"n":"isize"},{"n":"isize"}],"o":{"n":"redisresult"}}],[11,"zrangebyscore_limit_withscores","","Return a range of members in a sorted set, by score with limit with scores.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"m"},{"n":"mm"},{"n":"isize"},{"n":"isize"}],"o":{"n":"redisresult"}}],[11,"zrank","","Determine the index of a member in a sorted set.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"m"}],"o":{"n":"redisresult"}}],[11,"zrem","","Remove one or more members from a sorted set.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"m"}],"o":{"n":"redisresult"}}],[11,"zrembylex","","Remove all members in a sorted set between the given lexicographical range.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"m"},{"n":"mm"}],"o":{"n":"redisresult"}}],[11,"zrembyrank","","Remove all members in a sorted set within the given indexes.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"isize"},{"n":"isize"}],"o":{"n":"redisresult"}}],[11,"zrembyscore","","Remove all members in a sorted set within the given scores.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"m"},{"n":"mm"}],"o":{"n":"redisresult"}}],[11,"zrevrange","","Return a range of members in a sorted set, by index, with scores ordered from high to low.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"isize"},{"n":"isize"}],"o":{"n":"redisresult"}}],[11,"zrevrange_withscores","","Return a range of members in a sorted set, by index, with scores ordered from high to low.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"isize"},{"n":"isize"}],"o":{"n":"redisresult"}}],[11,"zrevrangebyscore","","Return a range of members in a sorted set, by score.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"mm"},{"n":"m"}],"o":{"n":"redisresult"}}],[11,"zrevrangebyscore_withscores","","Return a range of members in a sorted set, by score with scores.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"mm"},{"n":"m"}],"o":{"n":"redisresult"}}],[11,"zrevrangebyscore_limit","","Return a range of members in a sorted set, by score with limit.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"mm"},{"n":"m"},{"n":"isize"},{"n":"isize"}],"o":{"n":"redisresult"}}],[11,"zrevrangebyscore_limit_withscores","","Return a range of members in a sorted set, by score with limit with scores.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"mm"},{"n":"m"},{"n":"isize"},{"n":"isize"}],"o":{"n":"redisresult"}}],[11,"zrevrank","","Determine the index of a member in a sorted set, with scores ordered from high to low.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"m"}],"o":{"n":"redisresult"}}],[11,"zscore","","Get the score associated with the given member in a sorted set.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"m"}],"o":{"n":"redisresult"}}],[11,"zunionstore","","Unions multiple sorted sets and store the resulting sorted set in a new key using SUM as aggregation function.",21,null],[11,"zunionstore_min","","Unions multiple sorted sets and store the resulting sorted set in a new key using MIN as aggregation function.",21,null],[11,"zunionstore_max","","Unions multiple sorted sets and store the resulting sorted set in a new key using MAX as aggregation function.",21,null],[11,"pfadd","","Adds the specified elements to the specified HyperLogLog.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"e"}],"o":{"n":"redisresult"}}],[11,"pfcount","","Return the approximated cardinality of the set(s) observed by the HyperLogLog at key(s).",21,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"pfmerge","","Merge N different HyperLogLogs into a single one.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"publish","","Posts a message to the given channel.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"e"}],"o":{"n":"redisresult"}}],[11,"scan","","Incrementally iterate the keys space.",21,{"i":[{"n":"self"}],"o":{"g":["iter"],"n":"redisresult"}}],[11,"scan_match","","Incrementally iterate the keys space for keys matching a pattern.",21,{"i":[{"n":"self"},{"n":"p"}],"o":{"g":["iter"],"n":"redisresult"}}],[11,"hscan","","Incrementally iterate hash fields and associated values.",21,{"i":[{"n":"self"},{"n":"k"}],"o":{"g":["iter"],"n":"redisresult"}}],[11,"hscan_match","","Incrementally iterate hash fields and associated values for field names matching a pattern.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"p"}],"o":{"g":["iter"],"n":"redisresult"}}],[11,"sscan","","Incrementally iterate set elements.",21,{"i":[{"n":"self"},{"n":"k"}],"o":{"g":["iter"],"n":"redisresult"}}],[11,"sscan_match","","Incrementally iterate set elements for elements matching a pattern.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"p"}],"o":{"g":["iter"],"n":"redisresult"}}],[11,"zscan","","Incrementally iterate sorted set elements.",21,{"i":[{"n":"self"},{"n":"k"}],"o":{"g":["iter"],"n":"redisresult"}}],[11,"zscan_match","","Incrementally iterate sorted set elements for elements matching a pattern.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"p"}],"o":{"g":["iter"],"n":"redisresult"}}],[8,"PipelineCommands","","Implements common redis commands for pipelines.  Unlike the regular commands trait, this returns the pipeline rather than a result directly.  Other than that it works the same however.",null,null],[11,"get","","Get the value of a key.  If key is a vec this becomes an `MGET`.",22,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"self"}}],[11,"keys","","Gets all keys matching pattern",22,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"self"}}],[11,"set","","Set the string value of a key.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"v"}],"o":{"n":"self"}}],[11,"set_multiple","","Sets multiple keys to their values.",22,null],[11,"set_ex","","Set the value and expiration of a key.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"v"},{"n":"usize"}],"o":{"n":"self"}}],[11,"set_nx","","Set the value of a key, only if the key does not exist",22,{"i":[{"n":"self"},{"n":"k"},{"n":"v"}],"o":{"n":"self"}}],[11,"mset_nx","","Sets multiple keys to their values failing if at least one already exists.",22,null],[11,"getset","","Set the string value of a key and return its old value.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"v"}],"o":{"n":"self"}}],[11,"del","","Delete one or more keys.",22,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"self"}}],[11,"exists","","Determine if a key exists.",22,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"self"}}],[11,"expire","","Set a key's time to live in seconds.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"usize"}],"o":{"n":"self"}}],[11,"expire_at","","Set the expiration for a key as a UNIX timestamp.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"usize"}],"o":{"n":"self"}}],[11,"pexpire","","Set a key's time to live in milliseconds.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"usize"}],"o":{"n":"self"}}],[11,"pexpire_at","","Set the expiration for a key as a UNIX timestamp in milliseconds.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"usize"}],"o":{"n":"self"}}],[11,"persist","","Remove the expiration from a key.",22,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"self"}}],[11,"rename","","Rename a key.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"k"}],"o":{"n":"self"}}],[11,"rename_nx","","Rename a key, only if the new key does not exist.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"k"}],"o":{"n":"self"}}],[11,"append","","Append a value to a key.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"v"}],"o":{"n":"self"}}],[11,"incr","","Increment the numeric value of a key by the given amount.  This issues a `INCRBY` or `INCRBYFLOAT` depending on the type.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"v"}],"o":{"n":"self"}}],[11,"setbit","","Sets or clears the bit at offset in the string value stored at key.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"usize"},{"n":"bool"}],"o":{"n":"self"}}],[11,"getbit","","Returns the bit value at offset in the string value stored at key.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"usize"}],"o":{"n":"self"}}],[11,"bitcount","","Count set bits in a string.",22,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"self"}}],[11,"bitcount_range","","Count set bits in a string in a range.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"usize"},{"n":"usize"}],"o":{"n":"self"}}],[11,"bit_and","","Perform a bitwise AND between multiple keys (containing string values) and store the result in the destination key.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"k"}],"o":{"n":"self"}}],[11,"bit_or","","Perform a bitwise OR between multiple keys (containing string values) and store the result in the destination key.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"k"}],"o":{"n":"self"}}],[11,"bit_xor","","Perform a bitwise XOR between multiple keys (containing string values) and store the result in the destination key.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"k"}],"o":{"n":"self"}}],[11,"bit_not","","Perform a bitwise NOT of the key (containing string values) and store the result in the destination key.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"k"}],"o":{"n":"self"}}],[11,"strlen","","Get the length of the value stored in a key.",22,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"self"}}],[11,"hget","","Gets a single (or multiple) fields from a hash.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"f"}],"o":{"n":"self"}}],[11,"hdel","","Deletes a single (or multiple) fields from a hash.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"f"}],"o":{"n":"self"}}],[11,"hset","","Sets a single field in a hash.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"f"},{"n":"v"}],"o":{"n":"self"}}],[11,"hset_nx","","Sets a single field in a hash if it does not exist.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"f"},{"n":"v"}],"o":{"n":"self"}}],[11,"hset_multiple","","Sets a multiple fields in a hash.",22,null],[11,"hincr","","Increments a value.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"f"},{"n":"d"}],"o":{"n":"self"}}],[11,"hexists","","Checks if a field in a hash exists.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"f"}],"o":{"n":"self"}}],[11,"hkeys","","Gets all the keys in a hash.",22,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"self"}}],[11,"hvals","","Gets all the values in a hash.",22,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"self"}}],[11,"hgetall","","Gets all the fields and values in a hash.",22,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"self"}}],[11,"hlen","","Gets the length of a hash.",22,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"self"}}],[11,"blpop","","Remove and get the first element in a list, or block until one is available.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"usize"}],"o":{"n":"self"}}],[11,"brpop","","Remove and get the last element in a list, or block until one is available.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"usize"}],"o":{"n":"self"}}],[11,"brpoplpush","","Pop a value from a list, push it to another list and return it; or block until one is available.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"k"},{"n":"usize"}],"o":{"n":"self"}}],[11,"lindex","","Get an element from a list by its index.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"isize"}],"o":{"n":"self"}}],[11,"linsert_before","","Insert an element before another element in a list.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"p"},{"n":"v"}],"o":{"n":"self"}}],[11,"linsert_after","","Insert an element after another element in a list.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"p"},{"n":"v"}],"o":{"n":"self"}}],[11,"llen","","Returns the length of the list stored at key.",22,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"self"}}],[11,"lpop","","Removes and returns the first element of the list stored at key.",22,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"self"}}],[11,"lpush","","Insert all the specified values at the head of the list stored at key.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"v"}],"o":{"n":"self"}}],[11,"lpush_exists","","Inserts a value at the head of the list stored at key, only if key already exists and holds a list.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"v"}],"o":{"n":"self"}}],[11,"lrange","","Returns the specified elements of the list stored at key.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"isize"},{"n":"isize"}],"o":{"n":"self"}}],[11,"lrem","","Removes the first count occurrences of elements equal to value from the list stored at key.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"isize"},{"n":"v"}],"o":{"n":"self"}}],[11,"ltrim","","Trim an existing list so that it will contain only the specified range of elements specified.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"isize"},{"n":"isize"}],"o":{"n":"self"}}],[11,"lset","","Sets the list element at index to value",22,{"i":[{"n":"self"},{"n":"k"},{"n":"isize"},{"n":"v"}],"o":{"n":"self"}}],[11,"rpop","","Removes and returns the last element of the list stored at key.",22,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"self"}}],[11,"rpoplpush","","Pop a value from a list, push it to another list and return it.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"k"}],"o":{"n":"self"}}],[11,"rpush","","Insert all the specified values at the tail of the list stored at key.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"v"}],"o":{"n":"self"}}],[11,"rpush_exists","","Inserts value at the tail of the list stored at key, only if key already exists and holds a list.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"v"}],"o":{"n":"self"}}],[11,"sadd","","Add one or more members to a set.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"m"}],"o":{"n":"self"}}],[11,"scard","","Get the number of members in a set.",22,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"self"}}],[11,"sdiff","","Subtract multiple sets.",22,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"self"}}],[11,"sdiffstore","","Subtract multiple sets and store the resulting set in a key.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"k"}],"o":{"n":"self"}}],[11,"sinter","","Intersect multiple sets.",22,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"self"}}],[11,"sdinterstore","","Intersect multiple sets and store the resulting set in a key.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"k"}],"o":{"n":"self"}}],[11,"sismember","","Determine if a given value is a member of a set.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"m"}],"o":{"n":"self"}}],[11,"smembers","","Get all the members in a set.",22,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"self"}}],[11,"smove","","Move a member from one set to another.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"k"},{"n":"m"}],"o":{"n":"self"}}],[11,"spop","","Remove and return a random member from a set.",22,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"self"}}],[11,"srandmember","","Get one random member from a set.",22,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"self"}}],[11,"srandmember_multiple","","Get multiple random members from a set.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"usize"}],"o":{"n":"self"}}],[11,"srem","","Remove one or more members from a set.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"m"}],"o":{"n":"self"}}],[11,"sunion","","Add multiple sets.",22,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"self"}}],[11,"sunionstore","","Add multiple sets and store the resulting set in a key.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"k"}],"o":{"n":"self"}}],[11,"zadd","","Add one member to a sorted set, or update its score if it already exists.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"m"},{"n":"s"}],"o":{"n":"self"}}],[11,"zadd_multiple","","Add multiple members to a sorted set, or update its score if it already exists.",22,null],[11,"zcard","","Get the number of members in a sorted set.",22,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"self"}}],[11,"zcount","","Count the members in a sorted set with scores within the given values.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"m"},{"n":"mm"}],"o":{"n":"self"}}],[11,"zincr","","Increments the member in a sorted set at key by delta. If the member does not exist, it is added with delta as its score.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"m"},{"n":"d"}],"o":{"n":"self"}}],[11,"zinterstore","","Intersect multiple sorted sets and store the resulting sorted set in a new key using SUM as aggregation function.",22,null],[11,"zinterstore_min","","Intersect multiple sorted sets and store the resulting sorted set in a new key using MIN as aggregation function.",22,null],[11,"zinterstore_max","","Intersect multiple sorted sets and store the resulting sorted set in a new key using MAX as aggregation function.",22,null],[11,"zlexcount","","Count the number of members in a sorted set between a given lexicographical range.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"l"},{"n":"l"}],"o":{"n":"self"}}],[11,"zrange","","Return a range of members in a sorted set, by index",22,{"i":[{"n":"self"},{"n":"k"},{"n":"isize"},{"n":"isize"}],"o":{"n":"self"}}],[11,"zrange_withscores","","Return a range of members in a sorted set, by index with scores.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"isize"},{"n":"isize"}],"o":{"n":"self"}}],[11,"zrangebylex","","Return a range of members in a sorted set, by lexicographical range.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"m"},{"n":"mm"}],"o":{"n":"self"}}],[11,"zrangebylex_limit","","Return a range of members in a sorted set, by lexicographical range with offset and limit.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"m"},{"n":"mm"},{"n":"isize"},{"n":"isize"}],"o":{"n":"self"}}],[11,"zrevrangebylex","","Return a range of members in a sorted set, by lexicographical range.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"mm"},{"n":"m"}],"o":{"n":"self"}}],[11,"zrevrangebylex_limit","","Return a range of members in a sorted set, by lexicographical range with offset and limit.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"mm"},{"n":"m"},{"n":"isize"},{"n":"isize"}],"o":{"n":"self"}}],[11,"zrangebyscore","","Return a range of members in a sorted set, by score.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"m"},{"n":"mm"}],"o":{"n":"self"}}],[11,"zrangebyscore_withscores","","Return a range of members in a sorted set, by score with scores.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"m"},{"n":"mm"}],"o":{"n":"self"}}],[11,"zrangebyscore_limit","","Return a range of members in a sorted set, by score with limit.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"m"},{"n":"mm"},{"n":"isize"},{"n":"isize"}],"o":{"n":"self"}}],[11,"zrangebyscore_limit_withscores","","Return a range of members in a sorted set, by score with limit with scores.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"m"},{"n":"mm"},{"n":"isize"},{"n":"isize"}],"o":{"n":"self"}}],[11,"zrank","","Determine the index of a member in a sorted set.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"m"}],"o":{"n":"self"}}],[11,"zrem","","Remove one or more members from a sorted set.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"m"}],"o":{"n":"self"}}],[11,"zrembylex","","Remove all members in a sorted set between the given lexicographical range.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"m"},{"n":"mm"}],"o":{"n":"self"}}],[11,"zrembyrank","","Remove all members in a sorted set within the given indexes.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"isize"},{"n":"isize"}],"o":{"n":"self"}}],[11,"zrembyscore","","Remove all members in a sorted set within the given scores.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"m"},{"n":"mm"}],"o":{"n":"self"}}],[11,"zrevrange","","Return a range of members in a sorted set, by index, with scores ordered from high to low.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"isize"},{"n":"isize"}],"o":{"n":"self"}}],[11,"zrevrange_withscores","","Return a range of members in a sorted set, by index, with scores ordered from high to low.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"isize"},{"n":"isize"}],"o":{"n":"self"}}],[11,"zrevrangebyscore","","Return a range of members in a sorted set, by score.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"mm"},{"n":"m"}],"o":{"n":"self"}}],[11,"zrevrangebyscore_withscores","","Return a range of members in a sorted set, by score with scores.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"mm"},{"n":"m"}],"o":{"n":"self"}}],[11,"zrevrangebyscore_limit","","Return a range of members in a sorted set, by score with limit.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"mm"},{"n":"m"},{"n":"isize"},{"n":"isize"}],"o":{"n":"self"}}],[11,"zrevrangebyscore_limit_withscores","","Return a range of members in a sorted set, by score with limit with scores.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"mm"},{"n":"m"},{"n":"isize"},{"n":"isize"}],"o":{"n":"self"}}],[11,"zrevrank","","Determine the index of a member in a sorted set, with scores ordered from high to low.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"m"}],"o":{"n":"self"}}],[11,"zscore","","Get the score associated with the given member in a sorted set.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"m"}],"o":{"n":"self"}}],[11,"zunionstore","","Unions multiple sorted sets and store the resulting sorted set in a new key using SUM as aggregation function.",22,null],[11,"zunionstore_min","","Unions multiple sorted sets and store the resulting sorted set in a new key using MIN as aggregation function.",22,null],[11,"zunionstore_max","","Unions multiple sorted sets and store the resulting sorted set in a new key using MAX as aggregation function.",22,null],[11,"pfadd","","Adds the specified elements to the specified HyperLogLog.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"e"}],"o":{"n":"self"}}],[11,"pfcount","","Return the approximated cardinality of the set(s) observed by the HyperLogLog at key(s).",22,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"self"}}],[11,"pfmerge","","Merge N different HyperLogLogs into a single one.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"k"}],"o":{"n":"self"}}],[11,"publish","","Posts a message to the given channel.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"e"}],"o":{"n":"self"}}],[8,"PubSubCommands","","The PubSub trait allows subscribing to one or more channels and receiving a callback whenever a message arrives.",null,null],[10,"subscribe","","Subscribe to a list of channels using SUBSCRIBE and run the provided closure for each message received.",23,{"i":[{"n":"self"},{"n":"c"},{"n":"f"}],"o":{"n":"redisresult"}}],[10,"psubscribe","","Subscribe to a list of channels using PSUBSCRIBE and run the provided closure for each message received.",23,{"i":[{"n":"self"},{"n":"p"},{"n":"f"}],"o":{"n":"redisresult"}}],[8,"ConnectionLike","","Implements the \"stateless\" part of the connection interface that is used by the different objects in redis-rs.  Primarily it obviously applies to `Connection` object but also some other objects implement the interface (for instance whole clients or certain redis results).",null,null],[10,"req_packed_command","","Sends an already encoded (packed) command into the TCP socket and reads the single response from it.",24,null],[10,"req_packed_commands","","Sends multiple already encoded (packed) command into the TCP socket and reads `count` responses from it.  This is used to implement pipelining.",24,null],[10,"get_db","","Returns the database this connection is bound to.  Note that this information might be unreliable because it's initially cached and also might be incorrect if the connection like object is not actually connected.",24,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[8,"IntoConnectionInfo","","Converts an object into a connection info struct.  This allows the constructor of the client to accept connection information in a range of different formats.",null,null],[10,"into_connection_info","","",25,{"i":[{"n":"self"}],"o":{"g":["connectioninfo"],"n":"redisresult"}}],[8,"FromRedisValue","","This trait is used to convert a redis value into a more appropriate type.  While a redis `Value` can represent any response that comes back from the redis server, usually you want to map this into something that works better in rust.  For instance you might want to convert the return value into a `String` or an integer.",null,null],[10,"from_redis_value","","Given a redis `Value` this attempts to convert it into the given destination type.  If that fails because it's not compatible an appropriate error is generated.",26,{"i":[{"n":"value"}],"o":{"n":"redisresult"}}],[11,"from_redis_values","","Similar to `from_redis_value` but constructs a vector of objects from another vector of values.  This primarily exists internally to customize the behavior for vectors of tuples.",26,null],[8,"ToRedisArgs","","Used to convert a value into one or multiple redis argument strings.  Most values will produce exactly one item but in some cases it might make sense to produce more than one.",null,null],[11,"to_redis_args","","This converts the value into a vector of bytes.  Each item is a single argument.  Most items generate a vector of a single item.",27,{"i":[{"n":"self"}],"o":{"g":["vec"],"n":"vec"}}],[10,"write_redis_args","","This writes the value into a vector of bytes.  Each item is a single argument.  Most items generate a single item.",27,{"i":[{"n":"self"},{"n":"vec"}]}],[11,"describe_numeric_behavior","","Returns an information about the contained value with regards to it's numeric behavior in a redis context.  This is used in some high level concepts to switch between different implementations of redis functions (for instance `INCR` vs `INCRBYFLOAT`).",27,{"i":[{"n":"self"}],"o":{"n":"numericbehavior"}}],[11,"is_single_arg","","Returns an indiciation if the value contained is exactly one argument.  It returns false if it's zero or more than one.  This is used in some high level functions to intelligently switch between `GET` and `MGET` variants.",27,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get","","Get the value of a key.  If key is a vec this becomes an `MGET`.",21,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"keys","","Gets all keys matching pattern",21,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"set","","Set the string value of a key.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"v"}],"o":{"n":"redisresult"}}],[11,"set_multiple","","Sets multiple keys to their values.",21,null],[11,"set_ex","","Set the value and expiration of a key.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"v"},{"n":"usize"}],"o":{"n":"redisresult"}}],[11,"set_nx","","Set the value of a key, only if the key does not exist",21,{"i":[{"n":"self"},{"n":"k"},{"n":"v"}],"o":{"n":"redisresult"}}],[11,"mset_nx","","Sets multiple keys to their values failing if at least one already exists.",21,null],[11,"getset","","Set the string value of a key and return its old value.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"v"}],"o":{"n":"redisresult"}}],[11,"del","","Delete one or more keys.",21,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"exists","","Determine if a key exists.",21,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"expire","","Set a key's time to live in seconds.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"usize"}],"o":{"n":"redisresult"}}],[11,"expire_at","","Set the expiration for a key as a UNIX timestamp.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"usize"}],"o":{"n":"redisresult"}}],[11,"pexpire","","Set a key's time to live in milliseconds.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"usize"}],"o":{"n":"redisresult"}}],[11,"pexpire_at","","Set the expiration for a key as a UNIX timestamp in milliseconds.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"usize"}],"o":{"n":"redisresult"}}],[11,"persist","","Remove the expiration from a key.",21,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"rename","","Rename a key.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"rename_nx","","Rename a key, only if the new key does not exist.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"append","","Append a value to a key.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"v"}],"o":{"n":"redisresult"}}],[11,"incr","","Increment the numeric value of a key by the given amount.  This issues a `INCRBY` or `INCRBYFLOAT` depending on the type.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"v"}],"o":{"n":"redisresult"}}],[11,"setbit","","Sets or clears the bit at offset in the string value stored at key.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"usize"},{"n":"bool"}],"o":{"n":"redisresult"}}],[11,"getbit","","Returns the bit value at offset in the string value stored at key.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"usize"}],"o":{"n":"redisresult"}}],[11,"bitcount","","Count set bits in a string.",21,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"bitcount_range","","Count set bits in a string in a range.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"usize"},{"n":"usize"}],"o":{"n":"redisresult"}}],[11,"bit_and","","Perform a bitwise AND between multiple keys (containing string values) and store the result in the destination key.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"bit_or","","Perform a bitwise OR between multiple keys (containing string values) and store the result in the destination key.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"bit_xor","","Perform a bitwise XOR between multiple keys (containing string values) and store the result in the destination key.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"bit_not","","Perform a bitwise NOT of the key (containing string values) and store the result in the destination key.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"strlen","","Get the length of the value stored in a key.",21,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"hget","","Gets a single (or multiple) fields from a hash.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"f"}],"o":{"n":"redisresult"}}],[11,"hdel","","Deletes a single (or multiple) fields from a hash.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"f"}],"o":{"n":"redisresult"}}],[11,"hset","","Sets a single field in a hash.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"f"},{"n":"v"}],"o":{"n":"redisresult"}}],[11,"hset_nx","","Sets a single field in a hash if it does not exist.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"f"},{"n":"v"}],"o":{"n":"redisresult"}}],[11,"hset_multiple","","Sets a multiple fields in a hash.",21,null],[11,"hincr","","Increments a value.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"f"},{"n":"d"}],"o":{"n":"redisresult"}}],[11,"hexists","","Checks if a field in a hash exists.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"f"}],"o":{"n":"redisresult"}}],[11,"hkeys","","Gets all the keys in a hash.",21,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"hvals","","Gets all the values in a hash.",21,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"hgetall","","Gets all the fields and values in a hash.",21,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"hlen","","Gets the length of a hash.",21,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"blpop","","Remove and get the first element in a list, or block until one is available.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"usize"}],"o":{"n":"redisresult"}}],[11,"brpop","","Remove and get the last element in a list, or block until one is available.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"usize"}],"o":{"n":"redisresult"}}],[11,"brpoplpush","","Pop a value from a list, push it to another list and return it; or block until one is available.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"k"},{"n":"usize"}],"o":{"n":"redisresult"}}],[11,"lindex","","Get an element from a list by its index.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"isize"}],"o":{"n":"redisresult"}}],[11,"linsert_before","","Insert an element before another element in a list.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"p"},{"n":"v"}],"o":{"n":"redisresult"}}],[11,"linsert_after","","Insert an element after another element in a list.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"p"},{"n":"v"}],"o":{"n":"redisresult"}}],[11,"llen","","Returns the length of the list stored at key.",21,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"lpop","","Removes and returns the first element of the list stored at key.",21,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"lpush","","Insert all the specified values at the head of the list stored at key.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"v"}],"o":{"n":"redisresult"}}],[11,"lpush_exists","","Inserts a value at the head of the list stored at key, only if key already exists and holds a list.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"v"}],"o":{"n":"redisresult"}}],[11,"lrange","","Returns the specified elements of the list stored at key.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"isize"},{"n":"isize"}],"o":{"n":"redisresult"}}],[11,"lrem","","Removes the first count occurrences of elements equal to value from the list stored at key.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"isize"},{"n":"v"}],"o":{"n":"redisresult"}}],[11,"ltrim","","Trim an existing list so that it will contain only the specified range of elements specified.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"isize"},{"n":"isize"}],"o":{"n":"redisresult"}}],[11,"lset","","Sets the list element at index to value",21,{"i":[{"n":"self"},{"n":"k"},{"n":"isize"},{"n":"v"}],"o":{"n":"redisresult"}}],[11,"rpop","","Removes and returns the last element of the list stored at key.",21,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"rpoplpush","","Pop a value from a list, push it to another list and return it.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"rpush","","Insert all the specified values at the tail of the list stored at key.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"v"}],"o":{"n":"redisresult"}}],[11,"rpush_exists","","Inserts value at the tail of the list stored at key, only if key already exists and holds a list.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"v"}],"o":{"n":"redisresult"}}],[11,"sadd","","Add one or more members to a set.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"m"}],"o":{"n":"redisresult"}}],[11,"scard","","Get the number of members in a set.",21,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"sdiff","","Subtract multiple sets.",21,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"sdiffstore","","Subtract multiple sets and store the resulting set in a key.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"sinter","","Intersect multiple sets.",21,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"sdinterstore","","Intersect multiple sets and store the resulting set in a key.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"sismember","","Determine if a given value is a member of a set.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"m"}],"o":{"n":"redisresult"}}],[11,"smembers","","Get all the members in a set.",21,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"smove","","Move a member from one set to another.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"k"},{"n":"m"}],"o":{"n":"redisresult"}}],[11,"spop","","Remove and return a random member from a set.",21,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"srandmember","","Get one random member from a set.",21,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"srandmember_multiple","","Get multiple random members from a set.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"usize"}],"o":{"n":"redisresult"}}],[11,"srem","","Remove one or more members from a set.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"m"}],"o":{"n":"redisresult"}}],[11,"sunion","","Add multiple sets.",21,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"sunionstore","","Add multiple sets and store the resulting set in a key.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"zadd","","Add one member to a sorted set, or update its score if it already exists.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"m"},{"n":"s"}],"o":{"n":"redisresult"}}],[11,"zadd_multiple","","Add multiple members to a sorted set, or update its score if it already exists.",21,null],[11,"zcard","","Get the number of members in a sorted set.",21,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"zcount","","Count the members in a sorted set with scores within the given values.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"m"},{"n":"mm"}],"o":{"n":"redisresult"}}],[11,"zincr","","Increments the member in a sorted set at key by delta. If the member does not exist, it is added with delta as its score.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"m"},{"n":"d"}],"o":{"n":"redisresult"}}],[11,"zinterstore","","Intersect multiple sorted sets and store the resulting sorted set in a new key using SUM as aggregation function.",21,null],[11,"zinterstore_min","","Intersect multiple sorted sets and store the resulting sorted set in a new key using MIN as aggregation function.",21,null],[11,"zinterstore_max","","Intersect multiple sorted sets and store the resulting sorted set in a new key using MAX as aggregation function.",21,null],[11,"zlexcount","","Count the number of members in a sorted set between a given lexicographical range.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"l"},{"n":"l"}],"o":{"n":"redisresult"}}],[11,"zrange","","Return a range of members in a sorted set, by index",21,{"i":[{"n":"self"},{"n":"k"},{"n":"isize"},{"n":"isize"}],"o":{"n":"redisresult"}}],[11,"zrange_withscores","","Return a range of members in a sorted set, by index with scores.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"isize"},{"n":"isize"}],"o":{"n":"redisresult"}}],[11,"zrangebylex","","Return a range of members in a sorted set, by lexicographical range.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"m"},{"n":"mm"}],"o":{"n":"redisresult"}}],[11,"zrangebylex_limit","","Return a range of members in a sorted set, by lexicographical range with offset and limit.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"m"},{"n":"mm"},{"n":"isize"},{"n":"isize"}],"o":{"n":"redisresult"}}],[11,"zrevrangebylex","","Return a range of members in a sorted set, by lexicographical range.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"mm"},{"n":"m"}],"o":{"n":"redisresult"}}],[11,"zrevrangebylex_limit","","Return a range of members in a sorted set, by lexicographical range with offset and limit.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"mm"},{"n":"m"},{"n":"isize"},{"n":"isize"}],"o":{"n":"redisresult"}}],[11,"zrangebyscore","","Return a range of members in a sorted set, by score.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"m"},{"n":"mm"}],"o":{"n":"redisresult"}}],[11,"zrangebyscore_withscores","","Return a range of members in a sorted set, by score with scores.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"m"},{"n":"mm"}],"o":{"n":"redisresult"}}],[11,"zrangebyscore_limit","","Return a range of members in a sorted set, by score with limit.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"m"},{"n":"mm"},{"n":"isize"},{"n":"isize"}],"o":{"n":"redisresult"}}],[11,"zrangebyscore_limit_withscores","","Return a range of members in a sorted set, by score with limit with scores.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"m"},{"n":"mm"},{"n":"isize"},{"n":"isize"}],"o":{"n":"redisresult"}}],[11,"zrank","","Determine the index of a member in a sorted set.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"m"}],"o":{"n":"redisresult"}}],[11,"zrem","","Remove one or more members from a sorted set.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"m"}],"o":{"n":"redisresult"}}],[11,"zrembylex","","Remove all members in a sorted set between the given lexicographical range.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"m"},{"n":"mm"}],"o":{"n":"redisresult"}}],[11,"zrembyrank","","Remove all members in a sorted set within the given indexes.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"isize"},{"n":"isize"}],"o":{"n":"redisresult"}}],[11,"zrembyscore","","Remove all members in a sorted set within the given scores.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"m"},{"n":"mm"}],"o":{"n":"redisresult"}}],[11,"zrevrange","","Return a range of members in a sorted set, by index, with scores ordered from high to low.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"isize"},{"n":"isize"}],"o":{"n":"redisresult"}}],[11,"zrevrange_withscores","","Return a range of members in a sorted set, by index, with scores ordered from high to low.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"isize"},{"n":"isize"}],"o":{"n":"redisresult"}}],[11,"zrevrangebyscore","","Return a range of members in a sorted set, by score.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"mm"},{"n":"m"}],"o":{"n":"redisresult"}}],[11,"zrevrangebyscore_withscores","","Return a range of members in a sorted set, by score with scores.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"mm"},{"n":"m"}],"o":{"n":"redisresult"}}],[11,"zrevrangebyscore_limit","","Return a range of members in a sorted set, by score with limit.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"mm"},{"n":"m"},{"n":"isize"},{"n":"isize"}],"o":{"n":"redisresult"}}],[11,"zrevrangebyscore_limit_withscores","","Return a range of members in a sorted set, by score with limit with scores.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"mm"},{"n":"m"},{"n":"isize"},{"n":"isize"}],"o":{"n":"redisresult"}}],[11,"zrevrank","","Determine the index of a member in a sorted set, with scores ordered from high to low.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"m"}],"o":{"n":"redisresult"}}],[11,"zscore","","Get the score associated with the given member in a sorted set.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"m"}],"o":{"n":"redisresult"}}],[11,"zunionstore","","Unions multiple sorted sets and store the resulting sorted set in a new key using SUM as aggregation function.",21,null],[11,"zunionstore_min","","Unions multiple sorted sets and store the resulting sorted set in a new key using MIN as aggregation function.",21,null],[11,"zunionstore_max","","Unions multiple sorted sets and store the resulting sorted set in a new key using MAX as aggregation function.",21,null],[11,"pfadd","","Adds the specified elements to the specified HyperLogLog.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"e"}],"o":{"n":"redisresult"}}],[11,"pfcount","","Return the approximated cardinality of the set(s) observed by the HyperLogLog at key(s).",21,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"pfmerge","","Merge N different HyperLogLogs into a single one.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"k"}],"o":{"n":"redisresult"}}],[11,"publish","","Posts a message to the given channel.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"e"}],"o":{"n":"redisresult"}}],[11,"scan","","Incrementally iterate the keys space.",21,{"i":[{"n":"self"}],"o":{"g":["iter"],"n":"redisresult"}}],[11,"scan_match","","Incrementally iterate the keys space for keys matching a pattern.",21,{"i":[{"n":"self"},{"n":"p"}],"o":{"g":["iter"],"n":"redisresult"}}],[11,"hscan","","Incrementally iterate hash fields and associated values.",21,{"i":[{"n":"self"},{"n":"k"}],"o":{"g":["iter"],"n":"redisresult"}}],[11,"hscan_match","","Incrementally iterate hash fields and associated values for field names matching a pattern.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"p"}],"o":{"g":["iter"],"n":"redisresult"}}],[11,"sscan","","Incrementally iterate set elements.",21,{"i":[{"n":"self"},{"n":"k"}],"o":{"g":["iter"],"n":"redisresult"}}],[11,"sscan_match","","Incrementally iterate set elements for elements matching a pattern.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"p"}],"o":{"g":["iter"],"n":"redisresult"}}],[11,"zscan","","Incrementally iterate sorted set elements.",21,{"i":[{"n":"self"},{"n":"k"}],"o":{"g":["iter"],"n":"redisresult"}}],[11,"zscan_match","","Incrementally iterate sorted set elements for elements matching a pattern.",21,{"i":[{"n":"self"},{"n":"k"},{"n":"p"}],"o":{"g":["iter"],"n":"redisresult"}}],[11,"get","","Get the value of a key.  If key is a vec this becomes an `MGET`.",22,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"self"}}],[11,"keys","","Gets all keys matching pattern",22,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"self"}}],[11,"set","","Set the string value of a key.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"v"}],"o":{"n":"self"}}],[11,"set_multiple","","Sets multiple keys to their values.",22,null],[11,"set_ex","","Set the value and expiration of a key.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"v"},{"n":"usize"}],"o":{"n":"self"}}],[11,"set_nx","","Set the value of a key, only if the key does not exist",22,{"i":[{"n":"self"},{"n":"k"},{"n":"v"}],"o":{"n":"self"}}],[11,"mset_nx","","Sets multiple keys to their values failing if at least one already exists.",22,null],[11,"getset","","Set the string value of a key and return its old value.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"v"}],"o":{"n":"self"}}],[11,"del","","Delete one or more keys.",22,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"self"}}],[11,"exists","","Determine if a key exists.",22,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"self"}}],[11,"expire","","Set a key's time to live in seconds.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"usize"}],"o":{"n":"self"}}],[11,"expire_at","","Set the expiration for a key as a UNIX timestamp.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"usize"}],"o":{"n":"self"}}],[11,"pexpire","","Set a key's time to live in milliseconds.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"usize"}],"o":{"n":"self"}}],[11,"pexpire_at","","Set the expiration for a key as a UNIX timestamp in milliseconds.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"usize"}],"o":{"n":"self"}}],[11,"persist","","Remove the expiration from a key.",22,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"self"}}],[11,"rename","","Rename a key.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"k"}],"o":{"n":"self"}}],[11,"rename_nx","","Rename a key, only if the new key does not exist.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"k"}],"o":{"n":"self"}}],[11,"append","","Append a value to a key.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"v"}],"o":{"n":"self"}}],[11,"incr","","Increment the numeric value of a key by the given amount.  This issues a `INCRBY` or `INCRBYFLOAT` depending on the type.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"v"}],"o":{"n":"self"}}],[11,"setbit","","Sets or clears the bit at offset in the string value stored at key.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"usize"},{"n":"bool"}],"o":{"n":"self"}}],[11,"getbit","","Returns the bit value at offset in the string value stored at key.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"usize"}],"o":{"n":"self"}}],[11,"bitcount","","Count set bits in a string.",22,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"self"}}],[11,"bitcount_range","","Count set bits in a string in a range.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"usize"},{"n":"usize"}],"o":{"n":"self"}}],[11,"bit_and","","Perform a bitwise AND between multiple keys (containing string values) and store the result in the destination key.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"k"}],"o":{"n":"self"}}],[11,"bit_or","","Perform a bitwise OR between multiple keys (containing string values) and store the result in the destination key.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"k"}],"o":{"n":"self"}}],[11,"bit_xor","","Perform a bitwise XOR between multiple keys (containing string values) and store the result in the destination key.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"k"}],"o":{"n":"self"}}],[11,"bit_not","","Perform a bitwise NOT of the key (containing string values) and store the result in the destination key.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"k"}],"o":{"n":"self"}}],[11,"strlen","","Get the length of the value stored in a key.",22,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"self"}}],[11,"hget","","Gets a single (or multiple) fields from a hash.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"f"}],"o":{"n":"self"}}],[11,"hdel","","Deletes a single (or multiple) fields from a hash.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"f"}],"o":{"n":"self"}}],[11,"hset","","Sets a single field in a hash.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"f"},{"n":"v"}],"o":{"n":"self"}}],[11,"hset_nx","","Sets a single field in a hash if it does not exist.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"f"},{"n":"v"}],"o":{"n":"self"}}],[11,"hset_multiple","","Sets a multiple fields in a hash.",22,null],[11,"hincr","","Increments a value.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"f"},{"n":"d"}],"o":{"n":"self"}}],[11,"hexists","","Checks if a field in a hash exists.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"f"}],"o":{"n":"self"}}],[11,"hkeys","","Gets all the keys in a hash.",22,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"self"}}],[11,"hvals","","Gets all the values in a hash.",22,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"self"}}],[11,"hgetall","","Gets all the fields and values in a hash.",22,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"self"}}],[11,"hlen","","Gets the length of a hash.",22,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"self"}}],[11,"blpop","","Remove and get the first element in a list, or block until one is available.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"usize"}],"o":{"n":"self"}}],[11,"brpop","","Remove and get the last element in a list, or block until one is available.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"usize"}],"o":{"n":"self"}}],[11,"brpoplpush","","Pop a value from a list, push it to another list and return it; or block until one is available.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"k"},{"n":"usize"}],"o":{"n":"self"}}],[11,"lindex","","Get an element from a list by its index.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"isize"}],"o":{"n":"self"}}],[11,"linsert_before","","Insert an element before another element in a list.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"p"},{"n":"v"}],"o":{"n":"self"}}],[11,"linsert_after","","Insert an element after another element in a list.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"p"},{"n":"v"}],"o":{"n":"self"}}],[11,"llen","","Returns the length of the list stored at key.",22,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"self"}}],[11,"lpop","","Removes and returns the first element of the list stored at key.",22,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"self"}}],[11,"lpush","","Insert all the specified values at the head of the list stored at key.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"v"}],"o":{"n":"self"}}],[11,"lpush_exists","","Inserts a value at the head of the list stored at key, only if key already exists and holds a list.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"v"}],"o":{"n":"self"}}],[11,"lrange","","Returns the specified elements of the list stored at key.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"isize"},{"n":"isize"}],"o":{"n":"self"}}],[11,"lrem","","Removes the first count occurrences of elements equal to value from the list stored at key.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"isize"},{"n":"v"}],"o":{"n":"self"}}],[11,"ltrim","","Trim an existing list so that it will contain only the specified range of elements specified.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"isize"},{"n":"isize"}],"o":{"n":"self"}}],[11,"lset","","Sets the list element at index to value",22,{"i":[{"n":"self"},{"n":"k"},{"n":"isize"},{"n":"v"}],"o":{"n":"self"}}],[11,"rpop","","Removes and returns the last element of the list stored at key.",22,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"self"}}],[11,"rpoplpush","","Pop a value from a list, push it to another list and return it.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"k"}],"o":{"n":"self"}}],[11,"rpush","","Insert all the specified values at the tail of the list stored at key.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"v"}],"o":{"n":"self"}}],[11,"rpush_exists","","Inserts value at the tail of the list stored at key, only if key already exists and holds a list.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"v"}],"o":{"n":"self"}}],[11,"sadd","","Add one or more members to a set.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"m"}],"o":{"n":"self"}}],[11,"scard","","Get the number of members in a set.",22,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"self"}}],[11,"sdiff","","Subtract multiple sets.",22,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"self"}}],[11,"sdiffstore","","Subtract multiple sets and store the resulting set in a key.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"k"}],"o":{"n":"self"}}],[11,"sinter","","Intersect multiple sets.",22,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"self"}}],[11,"sdinterstore","","Intersect multiple sets and store the resulting set in a key.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"k"}],"o":{"n":"self"}}],[11,"sismember","","Determine if a given value is a member of a set.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"m"}],"o":{"n":"self"}}],[11,"smembers","","Get all the members in a set.",22,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"self"}}],[11,"smove","","Move a member from one set to another.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"k"},{"n":"m"}],"o":{"n":"self"}}],[11,"spop","","Remove and return a random member from a set.",22,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"self"}}],[11,"srandmember","","Get one random member from a set.",22,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"self"}}],[11,"srandmember_multiple","","Get multiple random members from a set.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"usize"}],"o":{"n":"self"}}],[11,"srem","","Remove one or more members from a set.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"m"}],"o":{"n":"self"}}],[11,"sunion","","Add multiple sets.",22,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"self"}}],[11,"sunionstore","","Add multiple sets and store the resulting set in a key.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"k"}],"o":{"n":"self"}}],[11,"zadd","","Add one member to a sorted set, or update its score if it already exists.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"m"},{"n":"s"}],"o":{"n":"self"}}],[11,"zadd_multiple","","Add multiple members to a sorted set, or update its score if it already exists.",22,null],[11,"zcard","","Get the number of members in a sorted set.",22,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"self"}}],[11,"zcount","","Count the members in a sorted set with scores within the given values.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"m"},{"n":"mm"}],"o":{"n":"self"}}],[11,"zincr","","Increments the member in a sorted set at key by delta. If the member does not exist, it is added with delta as its score.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"m"},{"n":"d"}],"o":{"n":"self"}}],[11,"zinterstore","","Intersect multiple sorted sets and store the resulting sorted set in a new key using SUM as aggregation function.",22,null],[11,"zinterstore_min","","Intersect multiple sorted sets and store the resulting sorted set in a new key using MIN as aggregation function.",22,null],[11,"zinterstore_max","","Intersect multiple sorted sets and store the resulting sorted set in a new key using MAX as aggregation function.",22,null],[11,"zlexcount","","Count the number of members in a sorted set between a given lexicographical range.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"l"},{"n":"l"}],"o":{"n":"self"}}],[11,"zrange","","Return a range of members in a sorted set, by index",22,{"i":[{"n":"self"},{"n":"k"},{"n":"isize"},{"n":"isize"}],"o":{"n":"self"}}],[11,"zrange_withscores","","Return a range of members in a sorted set, by index with scores.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"isize"},{"n":"isize"}],"o":{"n":"self"}}],[11,"zrangebylex","","Return a range of members in a sorted set, by lexicographical range.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"m"},{"n":"mm"}],"o":{"n":"self"}}],[11,"zrangebylex_limit","","Return a range of members in a sorted set, by lexicographical range with offset and limit.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"m"},{"n":"mm"},{"n":"isize"},{"n":"isize"}],"o":{"n":"self"}}],[11,"zrevrangebylex","","Return a range of members in a sorted set, by lexicographical range.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"mm"},{"n":"m"}],"o":{"n":"self"}}],[11,"zrevrangebylex_limit","","Return a range of members in a sorted set, by lexicographical range with offset and limit.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"mm"},{"n":"m"},{"n":"isize"},{"n":"isize"}],"o":{"n":"self"}}],[11,"zrangebyscore","","Return a range of members in a sorted set, by score.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"m"},{"n":"mm"}],"o":{"n":"self"}}],[11,"zrangebyscore_withscores","","Return a range of members in a sorted set, by score with scores.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"m"},{"n":"mm"}],"o":{"n":"self"}}],[11,"zrangebyscore_limit","","Return a range of members in a sorted set, by score with limit.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"m"},{"n":"mm"},{"n":"isize"},{"n":"isize"}],"o":{"n":"self"}}],[11,"zrangebyscore_limit_withscores","","Return a range of members in a sorted set, by score with limit with scores.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"m"},{"n":"mm"},{"n":"isize"},{"n":"isize"}],"o":{"n":"self"}}],[11,"zrank","","Determine the index of a member in a sorted set.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"m"}],"o":{"n":"self"}}],[11,"zrem","","Remove one or more members from a sorted set.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"m"}],"o":{"n":"self"}}],[11,"zrembylex","","Remove all members in a sorted set between the given lexicographical range.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"m"},{"n":"mm"}],"o":{"n":"self"}}],[11,"zrembyrank","","Remove all members in a sorted set within the given indexes.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"isize"},{"n":"isize"}],"o":{"n":"self"}}],[11,"zrembyscore","","Remove all members in a sorted set within the given scores.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"m"},{"n":"mm"}],"o":{"n":"self"}}],[11,"zrevrange","","Return a range of members in a sorted set, by index, with scores ordered from high to low.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"isize"},{"n":"isize"}],"o":{"n":"self"}}],[11,"zrevrange_withscores","","Return a range of members in a sorted set, by index, with scores ordered from high to low.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"isize"},{"n":"isize"}],"o":{"n":"self"}}],[11,"zrevrangebyscore","","Return a range of members in a sorted set, by score.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"mm"},{"n":"m"}],"o":{"n":"self"}}],[11,"zrevrangebyscore_withscores","","Return a range of members in a sorted set, by score with scores.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"mm"},{"n":"m"}],"o":{"n":"self"}}],[11,"zrevrangebyscore_limit","","Return a range of members in a sorted set, by score with limit.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"mm"},{"n":"m"},{"n":"isize"},{"n":"isize"}],"o":{"n":"self"}}],[11,"zrevrangebyscore_limit_withscores","","Return a range of members in a sorted set, by score with limit with scores.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"mm"},{"n":"m"},{"n":"isize"},{"n":"isize"}],"o":{"n":"self"}}],[11,"zrevrank","","Determine the index of a member in a sorted set, with scores ordered from high to low.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"m"}],"o":{"n":"self"}}],[11,"zscore","","Get the score associated with the given member in a sorted set.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"m"}],"o":{"n":"self"}}],[11,"zunionstore","","Unions multiple sorted sets and store the resulting sorted set in a new key using SUM as aggregation function.",22,null],[11,"zunionstore_min","","Unions multiple sorted sets and store the resulting sorted set in a new key using MIN as aggregation function.",22,null],[11,"zunionstore_max","","Unions multiple sorted sets and store the resulting sorted set in a new key using MAX as aggregation function.",22,null],[11,"pfadd","","Adds the specified elements to the specified HyperLogLog.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"e"}],"o":{"n":"self"}}],[11,"pfcount","","Return the approximated cardinality of the set(s) observed by the HyperLogLog at key(s).",22,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"self"}}],[11,"pfmerge","","Merge N different HyperLogLogs into a single one.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"k"}],"o":{"n":"self"}}],[11,"publish","","Posts a message to the given channel.",22,{"i":[{"n":"self"},{"n":"k"},{"n":"e"}],"o":{"n":"self"}}],[11,"to_redis_args","","This converts the value into a vector of bytes.  Each item is a single argument.  Most items generate a vector of a single item.",27,{"i":[{"n":"self"}],"o":{"g":["vec"],"n":"vec"}}],[11,"describe_numeric_behavior","","Returns an information about the contained value with regards to it's numeric behavior in a redis context.  This is used in some high level concepts to switch between different implementations of redis functions (for instance `INCR` vs `INCRBYFLOAT`).",27,{"i":[{"n":"self"}],"o":{"n":"numericbehavior"}}],[11,"is_single_arg","","Returns an indiciation if the value contained is exactly one argument.  It returns false if it's zero or more than one.  This is used in some high level functions to intelligently switch between `GET` and `MGET` variants.",27,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"from_redis_values","","Similar to `from_redis_value` but constructs a vector of objects from another vector of values.  This primarily exists internally to customize the behavior for vectors of tuples.",26,null]],"paths":[[3,"ConnectionInfo"],[4,"ControlFlow"],[4,"ConnectionAddr"],[4,"ErrorKind"],[4,"NumericBehavior"],[4,"Value"],[8,"ConnectionLike"],[3,"Connection"],[3,"SharedConnection"],[3,"Client"],[3,"Cmd"],[3,"Iter"],[3,"Pipeline"],[3,"Connection"],[3,"PubSub"],[3,"Msg"],[3,"Parser"],[3,"Script"],[3,"ScriptInvocation"],[3,"RedisError"],[3,"InfoDict"],[8,"Commands"],[8,"PipelineCommands"],[8,"PubSubCommands"],[8,"ConnectionLike"],[8,"IntoConnectionInfo"],[8,"FromRedisValue"],[8,"ToRedisArgs"]]};
initSearch(searchIndex);
